# -*- coding: utf-8 -*-
"""SmartSenseA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11uJ3vu9uygjLqRecjUzdQiBquIEFT_IX
"""

from datetime import datetime
import pandas as pd
import numpy as np
import json
import os
import matplotlib.pyplot as plt
from scipy.spatial.distance import cosine
import networkx as nx
from networkx.algorithms import community
import requests
from time import sleep

API_key = "YOUR_API_KEY"

headers = headers = {
    'authorization': API_key,
    'content-type': 'application/json',
}

upload_endpoint = 'https://api.assemblyai.com/v2/upload'
transcription_endpoint = "https://api.assemblyai.com/v2/transcript"

def upload(file_path):

    def read_audio(file_path):

        with open(file_path, 'rb') as f:
            while True:
                data = f.read(5_242_880)
                if not data:
                    break
                yield data

    upload_response =  requests.post(upload_endpoint,
                                     headers=headers,
                                     data=read_audio(file_path))

    return upload_response.json().get('upload_url')

def transcribe(upload_url):

    json = {"audio_url": upload_url, "auto_chapters": True}

    response = requests.post(transcription_endpoint, json=json, headers=headers)
    transcription_id = response.json()['id']

    return transcription_id

def get_result(transcription_id):

    current_status = "queued"

    endpoint = f"https://api.assemblyai.com/v2/transcript/{transcription_id}"

    while current_status not in ("completed", "error"):

        response = requests.get(endpoint, headers=headers)
        current_status = response.json()['status']

        if current_status in ("completed", "error"):
            return response.json()
        else:
            sleep(10)

upload_url = upload("VMP4732384152.mp3")

transcription_id = transcribe(upload_url)

response = get_result(transcription_id)

response

print(response["text"][0:500])

# Load the txt file
vid_path = '/content/VMP4732384152.mp3'
with open(vid_path, 'r') as f:
  vid = f.read()

# Get segments from txt by splitting on .
segments =  txt.split('.')
# Put the . back in
segments = [segment + '.' for segment in segments]
# Further split by comma
segments = [segment.split(',') for segment in segments]
# Flatten
segments = [item for sublist in segments for item in sublist]